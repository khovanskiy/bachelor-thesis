









 images/ 
arrows

bachelor-thesis.bib
	@inproceedings example-english,
		year        = 2015,
		booktitle   = Proceedings of IEEE Congress on Evolutionary Computation,
		author      = Maxim Buzdalov and Anatoly Shalyto,
		title       = Hard Test Generation for Augmenting Path Maximum Flow 
			Algorithms using Genetic Algorithms: Revisited,
		pages       = 2121-2128,
		langid      = english
	
	
	@article example-russian,
		author      = Виктор Сергеевич Хованский,
		title       = Генерация тестов для олимпиадных задач по программированию 
			с использованием генетических алгоритмов,
		journal     = Научно-технический вестник СПбГУ ИТМО,
		number      = 2(72),
		year        = 2011,
		pages       = 72-77,
		langid      = russian
	




bachelor-thesis.bib


	
	M3439
	Инкрементальный адаптивный алгоритм для построения маршрутов по заданным критериям в транспортной сети
	Хованский В.С.
	Шалыто А.А.
	канд. техн. наук, доцент
	2016
	
	
	Целью данной работы является иллюстрация стилевого файла 
		для оформления бакалаврских работ в ИТМО.
	
	
	Данная работа является примером оформления бакалаврской работы с использованием стилевого файла
		itmo-student-thesis.cls, разработанного Буздаловым М. В. для замены старого комплекта стилевых файлов,
		имеющего хождение на кафедре <<Компьютерные технологии>> Университета ИТМО.
	
	
	Данная работа не предполагает извлечения прямой экономической выгоды 
		из полученных результатов.
	
	
	Результатом работы является программный продукт, не нарушающий 
		требования экологической безопасности.
	
	
	Полученные результаты являются новыми, по крайней мере, ранее существующий стилевой файл
		никоим образом не соответствует ГОСТ, кроме того, он устроен совершенно уродским образом
		и не генерирует титульных страниц и аннотаций.
	
	
	Работа является продолжением работ над оформлением в 
		кандидатской диссертации и отчетов о НИР.
	
	
	Результаты, полученные в работе, могут быть использованы как довольно
		удобный способ получить халявное ГОСТ-образное форматирование в своей бакалаврской работе.
	
	
	
	
	
	
	
	
	
	
	В данном разделе размещается введение.
	
	
Глава 1. Обзор предметной области
В данной главе описаны основные понятия и определения из области построения маршрутов в теории графов. В первом разделе главы описаны понятия из теории графов. Во втором разделе описаны понятия из формальной области транспортных сетей. В третьем разделе формализуется задача и список требований по поддерживаемым свойствам для построения маршрутов. Четвертый раздел содержит краткое описание основных алгоритмов теории графов для построение путей со сводной таблицей преимуществ и недостатков данных подходов.

Основные определения

Теория графов -- раздел дискретной математики, изучающий свойства графов.



Граф -- это множество вершин(узлов), соединенных ребрами. В строгом определении графом называется такая пара множеств. , где  есть подмножество любого счетного множества, а  -- подмножество .



Маршрут -- это конечная последовательность вершин, в которой каждая вершина (кроме последней) соединена со следующей в последовательности вершиной ребром. Цепью называется маршрут без повторяющихся рёбер. Простой цепью называется маршрут без повторяющихся вершин (откуда следует, что в простой цепи нет повторяющихся рёбер).



Ориентированный маршрут (или путь) -- это конечная последовательность вершин и дуг, в которой каждый элемент инцидентен предыдущему и последующему.



Цикл -- это цепь, в которой первая и последняя вершины совпадают. При этом длиной пути (или цикла) называют число составляющих его ребер. Заметим, что если вершины и являются концами некоторого ребра, то согласно данному определению, последовательность является циклом. Чтобы избежать таких «вырожденных» случаев, вводят следующие понятия.



Транспортное средство -- это совокупность технических систем, предназначенных для перемещений людей и грузов из одного места в другое.



Транспортный узел -- это комплекс транспортных устройств в пункте стыка нескольких видов транспорта, совместно выполняющих операции по обслуживанию транзитных, местных и городских перевозок грузов и пассажиров.



Транспортный рейс --



Транспортная сеть -- это совокупность всех транспортных рейсов, представленных в течение интервала продажи билетов.



Остановка — специально отведенное общественное место, предназначенное для посадки/высадки пассажиров рейсового транспортного средства.



Расписание — 



Мульмодальный маршрут — это конечная последовательность транспортных рейсов, попав на которые в определенные промежутки времени можно добраться от начального транспортного узла до конечного.



Построитель маршрутов — это программный комплекс для обработки внешних поисковых клиентских запросов, имеющий доступ к полному объему данных о расписаниях на всех транспортных узлах и осуществляющий выдачу определенного количества маршрутов в соответствии с поступившими в запросах требованиями. Также в качестве дополнительных возможностей доступно построение фильтров и различной статистики (активные транспортные узлы, активные транспортные рейсы, проходящие через заданный узел).



Клиентское приложение — это любое приложение, которое осуществляет запросы к построителю маршрутов за результатом (маршрутами и фильтрами).


Виды транспорта и его особенности
В транспортной сети, в которой будут строиться маршруты, будет существовать только транспорт с конкретным расписанием транспортных рейсов. Таким образом, идет допущение о том, что система сети идеальна и весь транспорт гарантировано совершает остановки в назначенное время. Постановка вспомогательных свойств для построителя маршрутов, которые позволяют сгладить последствия этого допущения будут описаны в следующих главах. Далее идет описание рассматриваемого транспорта.

Железнодорожный
В задаче будут рассматриваться 2 вида железнодорожного транспорта. Во-первых, это будут поезда дальнего следования, у которых небольшое количество рейсов (около  в течение интервала продажи билетов). Во-вторых, это будут электрички, которые уже совершают до  рейсов за аналогичный промежуток времени.
Транспортными узлами являются железнодорожные станции и вокзалы.

Воздушный
Воздушный транспорт будет представлен только самолетами. При этом количество рейсов около , поэтому особый интерес этот случай не представляет. Но стоит отметить, что в большинстве случаев мультимодальный маршрут не будет содержать больше одного воздушного сегмента пути.
Транспортными узлами являются аэропорты.

Автомобильный
Автомобильный транспорт состоит из автобусных междугородних рейсов. Около 95 таких рейсов совершаются только между соседними городами, что сильно упрощает задачу, но количество все равно большое — .
Также в эту категорию входит транспорт в пределах города (или любого крупного населенного пункта), например, такси. Стоит отметить, что в этот вид транспорта можно внести любые другие средства передвижения внутри города, так как в конечном счете это не будет влиять на алгоритм. При этом важно, чтобы у нового транспорта в пределах города имелась возможность рассчитать эвристическое времени передвижения между двумя транспортными узлами, которые относятся к одному населенному пункту. Эту задачу следует решать на основе статистики или с помощью сторонних сервисов, которые умеют анализировать дорожную ситуацию, например, такие сервисы, как 2gis или Яндекс.карты, которые могут оценить время движения на основе карты пробок.
Транспортными узлами являются автобусные остановки и крупные населенные пункты.

Построение маршрутов
Основная задача, ставящаяся перед построителем маршрутов — построение маршрутов по данным, доступным в его памяти и внешних базах данных, доступных для чтения в конкретный момент времени. На алгоритм построения маршрутов в транспортной сети накладываются следующие условия и ограничениями.

Мультимодальность
Маршруты могут быть мультимодальными, то есть проходить через несколько точек-остановок, содержать пересадки, проходить разными видами транспорта со своими особенностями и т.д.; Это нужно для того, чтобы была возможность добраться из любой точки в любую, где есть хотя бы какой-нибудь транспорт. Вариант пройти пешком небольшой кусок пути тоже доступен внутри крупного населенного пункта также должен быть доступен.






Временные интервалы
Маршруты можно строить для определенных интервалов времени. Например, хотим выехать в промежуток с 8-00 до 12-00 утра, а приехать в любой день на следующей неделе, но обязательно после 21-00. Это требуется, чтобы иметь возможность бронировать гостиницу, не отходя от кассы.

Инкрементальное построение
Маршруты требуется строить инкрементально (не все сразу, а только небольшую часть из существующих) из-за того, что возможное количество маршрутов может достигать до 109 между парой крупных населенных пунктов с 3 допустимыми пересадками и интервалом времени в пути равным нескольким дням. Это требуется для конечного клиентского приложения, чтобы можно было организовать страничный показ результатов без полного вычисления всех маршрутов на предыдущих страницах.

Адаптивность по времени
Маршруты могут строиться адаптивно по времени из-за того, что важно время отклика алгоритма, то есть в приоритете время выполнения над показом действительно всех требуемых результатов.

Построение фильтров к доступным маршрутам
Под фильтром в данном случае понимается предикат, который принимает в качестве аргумента построенный маршрут и возвращает ИСТИНА или ЛОЖЬ в зависимости от того, удовлетворяет ли маршрут критериям поиска, которые задает фильтр.
Таким образом, помимо построения самих маршрутов требуется построить фильтры по доступным маршрутам со следующими условиями.

Косвенные признаки
Из-за того, что маршруты строятся не все сразу, то кроме непосредственно найденных маршрутов существует огромное количество потенциально доступных маршрутов. При этом мы хотим получить к ним доступ по косвенным признаками. Например, это может быть тип транспорта, номер поезда или тип места в самолете (у окна/у туалета/в хвосте). Формально любой параметр доступный в модели данных может стать доступным для фильтрации.
Примечание. Под моделью данных в данном случае подразумевается любой абстрактный объект, который имеет отражение в реальном мире: поезд, самолет, аэропорт и т.д.

Осуществление фильтрации


Функциональные зависимости
Не последнюю роль в фильтрах играют функциональные зависимости, потому что в последствии нужно будет их эффективно показывать без противоречий. Например, тип места «у окна» в купе и каюте относятся к разным типам транспорта и их нельзя объединять. Пример «дерева» функциональный зависимостей для поезда:

    Точки отправления и прибытия
    Интервалы отправления и прибытия
    Вид транспорта:
    Поезд:
    
	    Перевозчик
	    Бренд
	    Номер
	    Тип вагона:
	    
	    	Купе:
	    	
	    		Верхнее/нижнее
	    		Не у туалета
	    	
	    	Сидячий:
	    	
	    		У окна/у прохода
	    	
	    	Плацкарт:
	    	
	    		Верхнее/нижнее
	    		Не у туалета
	    		Боковое/не боковое
	    	
	    
	


Каждый уровень списка зависит от родительского уровня и строго им определяется для того, чтобы исключить ситуации, когда несколько косвенных признаков совпадают уже разных видов транспорта. Например, признак «Перевозчик» у поезда и самолета. Такое разделение необходимо для корректного с точки зрения логики и удобного вывода результата в клиентском приложении.

Сортировка маршрутов
Маршруты требуется строить в порядке сортировки. В простейшем варианте можно сортировать только построенные маршруты, что не представляет из себя никакой сложности. В сложном варианте маршруты строятся на основе любого предиката сравнения пары маршрутов и выдаются в результат, гарантируя определенный порядок. В рамках данной работы подходит «средний» вариант. Требуется гарантировать определенный порядок построенных маршрутов без пропусков, но предикаты известны заранее. Всего их основных 4 вида:

    Количество пересадок
    Время отправления
    Время прибытия
    Время в пути


Рассмотрим каждый подробнее.

Количество пересадок
Самая простая сортировка в рамках данной работы (или просто сортировка по-умолчанию). Несложно заметить, что количество пересадок будет пропорционально количеству транспорта, который будет включен в мультимодальный маршрут. И если представить каждый отрезок пути на конкретном транспорте отдельным ребром в абстрактном графе, то сортировка будет происходить относительно количества ребер.
Время отправления

Время прибытия

Время в пути

Известные алгоритмы
Алгоритм Дейкстры
Алгоритм Дейкстры - алгоритм на графах, изобретённый нидерландским учёным Эдсгером Дейкстрой в 1959 году. Находит кратчайшие пути от одной из вершин графа до всех остальных. Алгоритм работает только для графов без рёбер отрицательного веса.
Описание
В простейшей реализации для хранения чисел  можно использовать массив чисел, а для хранения принадлежности элемента множеству  — массив булевых переменных.

В начале алгоритма расстояние для начальной вершины полагается равным нулю, а все остальные расстояния заполняются большим положительным числом (большим максимального возможного пути в графе). Массив флагов заполняется нулями. Затем запускается основной цикл.

На каждом шаге цикла мы ищем вершину  с минимальным расстоянием и флагом равным нулю. Затем мы устанавливаем в ней флаг в 1 и проверяем все соседние с ней вершины . Если в них (в ) расстояние больше, чем сумма расстояния до текущей вершины и длины ребра, то уменьшаем его. Цикл завершается, когда флаги всех вершин становятся равны 1, либо когда у всех вершин c флагом 0 . Последний случай возможен тогда и только тогда, когда граф  несвязный.

Таблицы

В качестве примера таблицы приведена таблица .













Есть еще такое окружение tabu, его можно аккуратно растянуть на всю страницу.
Приведем пример (таблица ).













Рисунки

Пример рисунка (c помощью TikZ) приведен на рисунке . Под pdflatex можно также
использовать *.jpg, *.png и даже *.pdf, под latex можно использовать
Metapost. Последний можно использовать и под pdflatex, для чего в стилевике продекларированы
номера картинок от 1 до 20.













Листинги

В работах студентов кафедры <<Компьютерные технологии>> часто встречаются различные листинги. Листинги бывают
двух основных видов --- исходный код и псевдокод. Первый оформляется с помощью окружения lstlisting
из пакета listings, который уже включается в стилевике и немного настроен. Пример Hello World на Java
приведен на листинге .

[float=!h,caption=Пример исходного кода на Java,label=lst1]
public class HelloWorld 
	public static void main(String[] args) 
		System.out.println("Hello, world!");
	



Псевдокод можно оформлять с помощью разных пакетов. В данном стилевике включается пакет algorithmicx.
Сам по себе он не генерирует флоатов, поэтому для них используется пакет algorithm.
Пример их совместного использования приведен на листинге . Обратите внимание, что флоаты разные, а 
нумерация --- общая!

[!h]
Пример псевдокода

	IsPrime
		
			
				false
			
		
		true
	



Наконец, листинги из listings тоже можно подвешивать с помощью algorithm,
пример на листинге .

[!h]
Исходный код и флоат algorithm

public class HelloWorld 
	public static void main(String[] args) 
		System.out.println("Hello, world!");
	




	Глава 2. Теоретическое описание

Листинг  должен иметь номер 4.

[!h]
Исходный код и флоат algorithm

public class HelloWorld 
	public static void main(String[] args) 
		System.out.println("Hello, world!");
	




Рисунок  должен иметь номер 2.













Таблица  должна иметь номер 3.















В конце каждой главы желательно делать выводы. Вывод по данной главе --- нумерация работает корректно, ура!
	Глава 3. Реализация



	
	
	
	
	В данном разделе размещается заключение.
	
	
	[heading=trueHeading]
	
	
	
	
	
	Пример приложения
	
